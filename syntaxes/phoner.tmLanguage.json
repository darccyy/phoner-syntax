{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Phoner",

  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#semicolon"
    },
    {
      "include": "#statement"
    }
  ],

  "repository": {
    "comment": {
      "name": "comment.line.phoner",
      "begin": ";?\\s*#",
      "end": "$|;"
    },

    "semicolon": {
      "name": "keyword.operator.phoner",
      "match": ";"
    },

    "statement": {
      "begin": "(?<=^|;)",
      "end": "$|(?=;)|(?=\\s*#)",
      "patterns": [
        { "include": "#mode" },
        { "include": "#class" },
        { "include": "#rule" },
        { "include": "#test" },
        { "include": "#reason" },
        { "include": "#note" }
      ]
    },

    "mode": {
      "name": "keyword.control.phoner",
      "begin": "(?<=(^|;)\\s*)\\s*~\\s*",
      "end": "(?=$|;)",
      "patterns": [
        {
          "name": "keyword.control.phoner",
          "match": "(/.*/|<.*>|\\[.*\\])?"
        }
      ]
    },

    "class": {
      "begin": "(?<=(^|;)\\s*)\\s*\\$\\w+",
      "end": "(?=$|;)",
      "beginCaptures": { "0": { "name": "entity.name.class.phoner" } },
      "patterns": [
        {
          "begin": "=",
          "end": "(?=$|;)",
          "beginCaptures": { "0": { "name": "keyword.operator.phoner" } },
          "patterns": [{ "include": "#regex" }]
        }
      ]
    },

    "rule": {
      "patterns": [
        {
          "begin": "(?<=(^|;)\\s*)\\s*\\+",
          "end": "(?=$|;)",
          "beginCaptures": { "0": { "name": "keyword.control.phoner" } },
          "patterns": [{ "include": "#regex" }]
        },
        {
          "begin": "(?<=(^|;)\\s*)\\s*!",
          "end": "(?=$|;)",
          "beginCaptures": { "0": { "name": "variable.language.self.phoner" } },
          "patterns": [{ "include": "#regex" }]
        }
      ]
    },

    "test": {
      "begin": "(?<=(^|;)\\s*)\\?\\s*(?=\\+|!)",
      "end": "(?=$|;)",
      "beginCaptures": { "0": { "name": "keyword.other.phoner" } },
      "patterns": [
        {
          "begin": "\\+",
          "end": "(?=$|;)",
          "beginCaptures": { "0": { "name": "keyword.control.phoner" } }
        },
        {
          "begin": "!",
          "end": "(?=$|;)",
          "beginCaptures": { "0": { "name": "variable.language.self.phoner" } }
        }
      ]
    },

    "reason": {
      "name": "string.phoner",
      "begin": "(?<=(^|;)\\s*)\\s*@",
      "end": "(?=$|;)",
      "beginCaptures": { "0": { "name": "keyword.operator.phoner" } },
      "patterns": [
        {
          "begin": "(?<=@)\\s*\\*",
          "end": "(?=$|;)",
          "beginCaptures": { "0": { "name": "entity.name.function.phoner" } }
        }
      ]
    },

    "note": {
      "name": "entity.name.function.phoner",
      "begin": "(?<=(^|;)\\s*)\\s*\\*",
      "end": "(?=$|;)",
      "beginCaptures": { "0": { "name": "keyword.operator.phoner" } }
    },

    "regex": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": { "0": { "name": "punctuation.brackets.phoner" } },
          "endCaptures": { "0": { "name": "punctuation.brackets.phoner" } },
          "patterns": [{ "include": "#regex" }]
        },
        {
          "name": "keyword.operator.phoner",
          "match": "\\\\.|(?<=\\()\\?<?(=|!)|[\\[\\]\\|\\+\\*\\.]"
        },
        {
          "name": "keyword.other.phoner",
          "match": "[\\^\\$]"
        },
        {
          "name": "keyword.operator.phoner",
          "begin": "\\{",
          "end": "\\}",
          "match": "\\{\\d*\\,?\\d*}"
        },
        {
          "name": "entity.name.type.phoner",
          "match": "<\\w+>"
        }
      ]
    }
  },
  "scopeName": "source.phoner"
}
